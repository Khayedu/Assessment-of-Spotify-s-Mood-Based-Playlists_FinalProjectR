install.packages("ggfx")
install.packages("devtool")
install.packages("Rtools")
install.packages("flametree")
library(flametree)
# pick some colours
shades <- c("#1b2e3c", "#0c0c1e", "#74112f", "#f3e3e2")
# data structure defining the trees
dat <- flametree_grow(time = 10, trees = 10)
# draw the plot
dat %>%
flametree_plot(
background = "antiquewhite",
palette = shades,
style = "nativeflora"
)
library(flametree)
# pick some colours
shades <- c("#1b2e3c", "#0c0c1e", "#74112f", "#f3e3e2")
library(spotifyr)
Sys.setenv(SPOTIFY_CLIENT_ID = "1808c94d92d94f83843e8e7bbcde89e3")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "ce03a72698f740ac9606cde1cc3f3a83")
access.token <- get_spotify_access_token()
install.packages("sklearn")
get_my_playlists()
get_my_playlists("4dUFQ8q7YwRO6HqDfUYYzJ")
Happier <- get_playlist("4dUFQ8q7YwRO6HqDfUYYzJ")
View(Happier)
hap <-get_playlist_audio_features("4dUFQ8q7YwRO6HqDfUYYzJ")
?get_playlist_audio_features
install.packages("superml")
install.packages("Sklearn")
# Khaneya Womack
#R Reproducability For Final Project
# Initialization --------------------------------------------------------------
#install.packages("spotifyr")
#install.packages("superml")
install.packages("caret")
# Khaneya Womack
#R Reproducability For Final Project
# Initialization --------------------------------------------------------------
#install.packages("spotifyr")
#install.packages("superml")
#install.packages("caret")
install.packages("mlr")
# Khaneya Womack
#R Reproducability For Final Project
# Initialization --------------------------------------------------------------
#install.packages("spotifyr")
#install.packages("superml")
#install.packages("mlr")
install.packages("mlr3verse")
my.plist <- get_playlist("4dUFQ8q7YwRO6HqDfUYYzJ")
hap <-get_playlist_audio_features("4dUFQ8q7YwRO6HqDfUYYzJ")
tracks <- get_playlist_tracks(my.plist)
View(Happier)
my.plist <- get_playlist_audio_features("4dUFQ8q7YwRO6HqDfUYYzJ")
View(my.plist)
my.plist[["tracks"]]
my.plist <- data.frame(get_playlist_audio_features("4dUFQ8q7YwRO6HqDfUYYzJ"))
my.plist <- data.frame(get_playlist("4dUFQ8q7YwRO6HqDfUYYzJ"))
Sys.setenv(SPOTIFY_CLIENT_ID = "1808c94d92d94f83843e8e7bbcde89e3")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "ce03a72698f740ac9606cde1cc3f3a83")
access.token <- get_spotify_access_token()
my.plist <- data.frame(get_playlist("4dUFQ8q7YwRO6HqDfUYYzJ"))
get_playlist("4dUFQ8q7YwRO6HqDfUYYzJ")
canada <- get_playlist_audio_features("Spotify", "37i9dQZEVXbMda2apknTqH")
Sys.setenv(SPOTIFY_CLIENT_ID = "1808c94d92d94f83843e8e7bbcde89e3")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "ce03a72698f740ac9606cde1cc3f3a83")
access.token <- get_spotify_access_token()
access.token <- get_spotify_access_token()
Sys.setenv(SPOTIFY_CLIENT_ID = "1808c94d92d94f83843e8e7bbcde89e3")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "ce03a72698f740ac9606cde1cc3f3a83")
access.token <- get_spotify_access_token()
library(spotifyr)
library(superml)
library(mlr3)
Sys.setenv(SPOTIFY_CLIENT_ID = "1808c94d92d94f83843e8e7bbcde89e3")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "ce03a72698f740ac9606cde1cc3f3a83")
access.token <- get_spotify_access_token()
my.plist <- data.frame(get_playlist("4dUFQ8q7YwRO6HqDfUYYzJ"))
canada <- get_playlist_audio_features("Spotify", "37i9dQZEVXbMda2apknTqH")
names(c)[5] <- "Country"
View(canada)
c <- Canada %>%
#arrange(-instrumentalness) %>%
select(
track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
View(c)
View(c)
library(tidyverse)
library(knitr)
c <- Canada %>%
#arrange(-instrumentalness) %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
c <- canada %>%
#arrange(-instrumentalness) %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
c <- canada %>%
#arrange(-instrumentalness) %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
View(c)
ca.top <- canada %>%
#arrange(-instrumentalness) %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
write.csv(ca.top, "Data - Clean/Ca.top.csv")
happy <- get_playlist_audio_features("Spotify", "37i9dQZF1DXdPec7aLTmlC")
sad <- get_playlist_audio_features("Spotify", "37i9dQZF1DWSqBruwoIXkA")
calm <- get_playlist_audio_features("Spotify", "37i9dQZF1DXdEZt3tTR001")
energetic <- get_playlist_audio_features("Spotify", "37i9dQZF1DX0vHZ8elq0UK")
energy <- get_playlist_audio_features("Spotify", "37i9dQZF1DX0vHZ8elq0UK")
hap.s <- happy %>%
#arrange(-instrumentalness) %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
sad.s <- sad %>%
#arrange(-instrumentalness) %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
cal.s <- calm %>%
#arrange(-instrumentalness) %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
ene.s <- energy %>%
#arrange(-instrumentalness) %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
hap.s <- add_column(hap.s, "Happy")
names(hap.s)[10] <- "Playlist"
View(hap.s)
ene.s <- add_column(ene.s, "Energy")
names(ene.s)[10] <- "Playlist"
cal.s <- add_column(cal.s, "Calm")
names(cal.s)[10] <- "Playlist"
sad.s <- add_column(sad.s, "Sad")
names(sad.s)[10] <- "Playlist"
sad.s <- add_column(sad.s, "Sad")
names(sad.s)[10] <- "Playlist"
View(hap.s)
View(sad.s)
View(ene.s)
View(cal.s)
fulllist <- rbind(hap.s, sad.s, cal.s, ene.s)
fulllist <- rbind(hap.s, sad.s, cal.s, ene.s)
View(cal.s)
View(ene.s)
View(hap.s)
View(sad.s)
sad.s <- sad %>%
#arrange(-instrumentalness) %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
View(sad.s)
sad.s <- add_column(sad.s, "Sad")
names(sad.s)[10] <- "Playlist"
fulllist <- rbind(hap.s, sad.s, cal.s, ene.s)
write.csv(fulllist, "Data - Clean/fulllist.csv")
data <- read_csv("Fulllist")
data <- read_csv("Data - Clean/fulllist.csv")
kmean <- kmeans(data, 4)
library("ggplot2")
library("dplyr")
library("ggfortify")
kmean <- kmeans(data, 4)
library(ggplot2)
library(dplyr)
library(ggfortify)
kmean <- kmeans(data, 4)
?kmeans()
View(data)
hap.s <- happy %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
names(hap.s)[10] <- "Playlist"
View(hap.s)
hap.s <- add_column(hap.s, "1")
names(hap.s)[10] <- "Playlist"
sad.s <- sad %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
sad.s <- add_column(sad.s, "2")
names(sad.s)[10] <- "Playlist"
cal.s <- calm %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
cal.s <- add_column(cal.s, "3")
names(cal.s)[10] <- "Playlist"
ene.s <- energy %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
ene.s <- add_column(ene.s, "4")
names(ene.s)[10] <- "Playlist"
fulllist <- rbind(hap.s, sad.s, cal.s, ene.s)
write.csv(fulllist, "Data - Clean/fulllist.csv")
data <- read_csv("Data - Clean/fulllist.csv")
#arrange(-instrumentalness) %>%
select(Playlist, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
select(Playlist, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
select("Playlist", instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
select(instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence, Playlist)
select( instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence, Playlist)
select( instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence, Playlist)
select(instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence, Playlist)
data[2:10]
data %>% c(2:10)
View(data)
data <- read_csv("Data - Clean/fulllist.csv")
df <- sqldf("select instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence, Playlist from data")
library(sqldf)
df <- sqldf("select instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence, Playlist from data")
df <- with(data, data.frame(instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence, Playlist))
View(df)
kmean <- kmeans(df, 4)
View(kmean)
kmean$centers
kmean <- kmeans(df, 4)
kmean$centers
autoplot(kmean, df, frame = TRUE)
kmean$cluster
kmean$clusters
kmean[["cluster"]]
library(cluster)
library(fpc)
library(NbClust)
library(mclust)
library(factoextra)
library(corrplot)
col.features <- names(df[c(7:11)])
col.features <- names(df[c(7:10)])
col.features <- names(df[c(2:10)])
col.features <- names(data[c(2:10)])
hap.s <- happy %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
hap.s <- add_column(hap.s, "Happy")
names(hap.s)[10] <- "Playlist"
sad.s <- sad %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
sad.s <- add_column(sad.s, "Sad")
names(sad.s)[10] <- "Playlist"
cal.s <- calm %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
cal.s <- add_column(cal.s, "Calm")
names(cal.s)[10] <- "Playlist"
ene.s <- energy %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
ene.s <- add_column(ene.s, "Energy")
names(ene.s)[10] <- "Playlist"
fulllist <- rbind(hap.s, sad.s, cal.s, ene.s)
write.csv(fulllist, "Data - Clean/fulllist.csv")
data <- read_csv("Data - Clean/fulllist.csv")
# -------------------------------------------------------------------------
# Columns to evaluate
col.features <- names(data[c(1,3,4,5,6,7,8,9,10)])
# Normalize date
X <- data[col.features]
View(X)
data = as.data.frame(scale(X))
# K number
K <-4
#Clustering Kmeans
km <- kmeans(data,K)
fviz_cluster(km,data)
# Analysis del method
dd <- dist(data,method="euclidean")
km_stats <- cluster.stats(dd,km$cluster)
# Silhouette analysis
sil.km <- silhouette(km$cluster,dd)
fviz_silhouette(sil.km)
paste("The Dunn Index is ",km_stats$dunn)
fviz_cluster(km,data)
# -------------------------------------------------------------------------
# Columns to evaluate
col.features <- names(data[-c(2,11)])
# Normalize date
X <- data[col.features]
View(X)
# -------------------------------------------------------------------------
# Columns to evaluate
col.features <- names(data[-c(1,11)])
# Normalize date
X <- data[col.features]
data = as.data.frame(scale(X))
View(X)
# -------------------------------------------------------------------------
# Columns to evaluate
col.features <- names(data[,-c(1,11)])
# Normalize date
X <- data[col.features]
data <- read_csv("Data - Clean/fulllist.csv")
# -------------------------------------------------------------------------
# Columns to evaluate
col.features <- names(data[-c(1,3,4,5,6,7,8,9,10)])
# Normalize date
X <- data[col.features]
View(X)
# -------------------------------------------------------------------------
# Columns to evaluate
col.features <- names(data[-c(1,3,4,5,6,7,8,9,10)])
# -------------------------------------------------------------------------
# Columns to evaluate
col.features <- names(data[c(1,3,4,5,6,7,8,9,10)])
[col.features]
# Normalize date
X <- data[col.features]
table(km$cluster)
table(km$cluster)
?kmeans.predict
??kmeans.predict
autoplot(km, data, frame = TRUE)
prcomp(data, Scale=TRUE)
prcomp(X, Scale=TRUE)
pca <-prcomp(X, Scale=TRUE)
autoplot(pca$x[,1], pca$x[,2], frame = TRUE)
plot(pca$x[,1], pca$x[,2], frame = TRUE)
pca.var <- pca$sdev^2
pca.v.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.v.per, main = "scree Plot", xlab = "Principal Componet", ylab = "Percent Variation")
loadscores <- pca$rotation[,1]
score <- abs(loadscores)
s.ranked <- sort(score, decreasing = TRUE)
top_10_s <- names(s.ranked[1:10])
top_10_s
View(pca)
pca[["rotation"]]
pca$rotation[top_10_s,1]
pca$rotation[top_10_s]
pca$rotation[top_10_s, 1]
pca$rotation[top_10_s, 4]
pca$rotation[top_10_s, 2]
library(caret)
nor.data <- preProcess(X,method = c("center", "scale"))
normalized <- predict(nor.data, X)
X[1:5] %>% summary()
normalized[1:5] %>% summary()
View(normalized)
nor.data <- preProcess(X[2:9],method = c("center", "scale"))
normalized <- predict(nor.data, X)
X2 <- normalized[col.features]
normalized = as.data.frame(scale(X2))
View(X2)
km <- kmeans(normalized,K)
fviz_cluster(km,normalized)
km
#Clustering Kmeans
km <- kmeans(X2,K)
km
#Clustering Kmeans
km <- kmeans(X2[2:9],K)
km
fviz_cluster(km,X2)
ppv_pca <- prcomp(X2
[3:ncol(X2)],
center = TRUE, scale. = TRUE)
summary(ppv_pca)
library(spotifyr)
library(superml)
library(mlr3)
library(tidyverse)
library(knitr)
library(ggplot2)
library(dplyr)
library(sqldf)
library(cluster)
library(fpc)
library(NbClust)
library(mclust)
library(factoextra)
library(corrplot)
Sys.setenv(SPOTIFY_CLIENT_ID = "1808c94d92d94f83843e8e7bbcde89e3")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "ce03a72698f740ac9606cde1cc3f3a83")
access.token <- get_spotify_access_token()
#acc
happy <- get_playlist_audio_features("Spotify", "37i9dQZF1DXdPec7aLTmlC")
sad <- get_playlist_audio_features("Spotify", "37i9dQZF1DWSqBruwoIXkA")
calm <- get_playlist_audio_features("Spotify", "37i9dQZF1DXdEZt3tTR001")
energy <- get_playlist_audio_features("Spotify", "37i9dQZF1DX0vHZ8elq0UK")
hap.s <- happy %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
hap.s <- add_column(hap.s, "Happy")
names(hap.s)[10] <- "Playlist"
sad.s <- sad %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
sad.s <- add_column(sad.s, "Sad")
names(sad.s)[10] <- "Playlist"
cal.s <- calm %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
cal.s <- add_column(cal.s, "Calm")
names(cal.s)[10] <- "Playlist"
ene.s <- energy %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness,
loudness, valence)
ene.s <- add_column(ene.s, "Energy")
names(ene.s)[10] <- "Playlist"
fulllist <- rbind(hap.s, sad.s, cal.s, ene.s)
write.csv(fulllist, "Data - Clean/fulllist.csv")
data <- read_csv("Data - Clean/fulllist.csv")
# -------------------------------------------------------------------------
# Columns to evaluate
col.features <- names(data[c(1,3,4,5,6,7,8,9,10)])
# Normalize date
X <- data[col.features]
data = as.data.frame(scale(X))
X2 <- normalized[col.features]
normalized = as.data.frame(scale(X2))
View(X)
X2 <- normalized[2ncol(X)]
X2 <- normalized[2:ncol(X)]
library(corrplot)
library(factoextra)
library(mclust)
X2 <- normalized[2:ncol(X)]
View(cal.s)
