cal.s <- add_column(cal.s, "Calm")
names(cal.s)[9] <- "Playlist"
ene.s <- energy %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness, valence)
ene.s <- add_column(ene.s, "Energy")
names(ene.s)[9] <- "Playlist"
fulllist <- rbind(hap.s, sad.s, cal.s, ene.s)
write.csv(fulllist, "Data - Clean/fulllist.csv")
data <- read_csv("Data - Clean/fulllist.csv")
View(data)
col.features <- names(data[c(1,3,4,5,6,7,8,9)])
# Normalize data
X <- data[col.features]
View(X)
data = as.data.frame(scale(X))
# Normalize data
X <- data[col.features]
View(X)
# Columns to evaluate
data <- read_csv("Data - Clean/fulllist.csv") #loading data from CSV
col.features <- names(data[c(1,3,4,5,6,7,8,9)])
# Normalize data
X <- data[col.features]
X3<-scaler(X[2:ncol],min=0, max = 1)
X3<-scaler(X[2:9], min=0, max = 1)
X3<-scaler(X[2:8], min=0, max = 1)
View(X3)
nor.data <- preProcess(X[2:9],method = c("center", "scale"))
col.features <- names(data[c(1,3,4,5,6,7,8,9,10)])
# Normalize data
X <- data[col.features]
nor.data <- preProcess(X[2:9],method = c("center", "scale"))
normalized <- predict(nor.data, X)
X2 <- normalized[2:ncol(X)]
normalized = as.data.frame(scale(X2))
normalized = as.data.frame(scale(X))
X3<-scaler(X[2:8], min=0, max = 1)
normalized = as.data.frame(scale(X2))
data = as.data.frame(scale(X))
X2 <- normalized[2:ncol(X)]
normalized = as.data.frame(scale(X2))
View(X2)
col.features <- names(data[c(1,3,4,5,6,7,8,9,10)])
X3<-scaler(X[2:8])
# Columns to evaluate
data <- read_csv("Data - Clean/fulllist.csv") #loading data from CSV
col.features <- names(data[c(1,3,4,5,6,7,8,9,10)])
# Normalize data
X <- data[col.features]
View(data)
View(X)
X3<-scaler(X[2:8])
View(X3)
X.n <-scaler(X[2:8])
X.n <-scaler(X[2:8])
View(X.n)
ppv_pca <- prcomp(X.n #pca of all normalized data starting at column 2
[2:ncol(X.n)],
center = TRUE, scale. = TRUE)
summary(ppv_pca)
pca <- prcomp(X.n #pca of all normalized data starting at column 2
[2:ncol(X.n)],
center = TRUE, scale. = TRUE)
summary(pca)
plot(pca$x[,1], pca$x[,2], frame = TRUE)
Pca <- prcomp(X.n #pca of all normalized data starting at column 2
[2:ncol(X.n)],
center = TRUE, scale. = TRUE)
plot(Pca$x[,1], Pca$x[,2], frame = TRUE)
pca.var <- Pca$sdev^2
pca.v.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.v.per, main = "scree Plot", xlab = "Principal Componet", ylab = "Percent Variation")
loadscores <- Pca$rotation[,1]
score <- abs(loadscores)
s.ranked <- sort(score, decreasing = TRUE)
top_10_s <- names(s.ranked[1:10])
X.n <-scaler(X[2:8ncol(X)])
X.n <- scaler(X[2:ncol(X)])
X.n <- scaler(X[2:ncol(X)])
X.n <-scaler(X[2:8])
#Clustering Kmeans
set.seed(1)
km <- kmeans(X.n,K)
# K number
K <-4
km <- kmeans(X.n,K)
km
#visualizing Kmeans
fviz_cluster(km,X.n)
table(km$cluster)
# Analysis method euclidean (distance matrix)
dd <- dist(data,method="euclidean")
km_stats <- cluster.stats(dd,km$cluster)
# Analysis method euclidean (distance matrix)
dd <- dist(X.n,method="euclidean")
km_stats <- cluster.stats(dd,km$cluster)
View(km_stats)
# Silhouette analysis
sil.km <- silhouette(km$cluster,dd)
fviz_silhouette(sil.km)
paste("The Dunn Index is ",km_stats$dunn)
PC1
PCA(X.n[2:ncol(X.n)])
Pca <- prcomp(X.n, #pca of all normalized data starting at column 2
center = TRUE, scale. = TRUE)
#Ploting PCA 1 and PCA 2
plot(Pca$x[,1], Pca$x[,2], frame = TRUE)
summary(Pca)
PCA(X.n)
?PCA
Pca$x[1:4]
Pca$x
View(Pca)
Pca$x[PC1]
PC <- Pca$x
head(PC)
PC[,1:4]
kinput <- cbind.data.frame(X[,9], PC[,1:4])
View(kinput)
?kmeans
Km.out <- kmeans(kinput, K)
Km.out <- kmeans(kinput[,2:5], K)
Km.out
fviz_cluster(km.out,X)
fviz_cluster(Km.out,X)
fviz_cluster(Km.out,X.n)
table(Km.out$cluster)
# Analysis method euclidean (distance matrix)
PCK.dd <- dist(Km.out,method="euclidean")
table(Km.out$cluster)
table(km$cluster)
# Silhouette analysis
sil.km <- silhouette(km$cluster,dd)
fviz_silhouette(sil.km)
fviz_cluster(Km.out,kinput)
fviz_cluster(Km.out,kinput[,2:5])
fviz_cluster(Km.out)
fviz_cluster(Km.out)
View(kinput)
View(Km.out)
View(Km.out)
Km.out[["cluster"]]
Km.out$cluster
Km_labels <- cbind.data.frame(Km.out$cluster, kinput[,1])
View(Km_labels)
# Columns to evaluate
data <- read_csv("Data - Clean/fulllist.csv") #loading data from CSV
View(data)
col.features <- names(data[c(1,4,6,7,9,10)])
# Normalize data
X <- data[col.features]
View(X)
X.n <-scaler(X[2:5])
Pca <- prcomp(X.n, #pca of all normalized data starting at column 2
center = TRUE, scale. = TRUE)
summary(Pca)
View(X.n)
# Kmeans for PCA ----------------------------------------------------------
set.seed(1)
PC <- Pca$x
View(PC)
kinput <- cbind.data.frame(X[,6], PC)
View(kinput)
# K number
K <-4
Km.out <- kmeans(kinput[,2:5], K)
table(Km.out$cluster)
# Analysis method euclidean (distance matrix)
PCK.dd <- dist(Km.out,method="euclidean")
# Analysis method euclidean (distance matrix)
PCK.dd <- dist(Km.out, method="euclidean")
View(Km.out)
# Analysis method euclidean (distance matrix)
PCK.dd <- dist(Km.out$cluster, method="euclidean")
k_stats <- cluster.stats(PCK.dd,Km.out$cluster)
# Silhouette analysis
sil.kpca <- silhouette(Km.out$cluster,PCK.dd)
fviz_silhouette(sil.kpca)
clusters <- Km.out$cluster
View(kinput)
clusters <- cbind.data.frame(Km.out$cluster, kinput[,1])
View(clusters)
View(kinput)
clusters <- cbind.data.frame(Km.out$cluster, X[,6])
# Silhouette analysis
sil.kpca <- silhouette(Km.out$cluster,PCK.dd)
fviz_silhouette(sil.kpca)
fviz_cluster(Km.out, kinput)
fviz_cluster(Km.out, kinput[,2:5])
autoplot(Km.out, kinput[,2:5], frame = TRUE)
autoplot(Km.out$cluster, kinput[,2:5], frame = TRUE)
# Kmeans for PCA ----------------------------------------------------------
set.seed(7) #Set the seed for reproducibility
PC <- Pca$x
head(PC)
kinput <- cbind.data.frame(X[,6], PC)
Km.out <- kmeans(kinput[,2:5], K)
clusters <- cbind.data.frame(Km.out$cluster, X[,6])
scatter3D(Km.out, kinput[,2:5], z, ..., colvar = z, col = NULL, add = FALSE)
library("plot3D")
install.packages("plot3D")
#install.packages("plot3D")
library("plot3D")
scatter3D(Km.out, kinput[,2:5], z, ..., colvar = z, col = NULL, add = FALSE)
scatter3D(Km.out, kinput[,2:5], z, colvar = z, col = NULL, add = FALSE)
scatter3D(Km.out, kinput[,2:5], colvar = z, col = NULL, add = FALSE)
z <- 0
scatter3D(Km.out, kinput[,2:5], z, colvar = z, col = NULL, add = FALSE)
scatter3D(Km.out$cluster, kinput[,2:5], z, colvar = z, col = NULL, add = FALSE)
scatter3D(clusters, kinput[,1:3], z, colvar = z, col = NULL, add = FALSE)
View(kinput)
install.packages("scatterplot3d")
library(scatterplot3d)
View(kinput)
scatterplot3d(kinput[,2:4], pch=20, color=rainbow(3)[Km.out$cluster])
scatterplot3d(kinput[,2:4], pch=20, color=rainbow(4)[Km.out$cluster])
View(X.n)
scatterplot3d(X.n[,1,2,4], pch=20, color=rainbow(4)[Km.out$cluster])
scatterplot3d(X.n[,-3], pch=20, color=rainbow(4)[Km.out$cluster])
# Analysis method euclidean (distance matrix)
PCK.dd <- dist(Km.out$cluster, method="euclidean")
# Silhouette analysis
sil.kpca <- silhouette(clusters,PCK.dd)
View(clusters)
# Silhouette analysis
sil.kpca <- silhouette(clusters[,1],PCK.dd)
fviz_silhouette(sil.kpca)
k_stats <- cluster.stats(PCK.dd,Km.out$cluster)
fviz_silhouette(sil.kpca)
paste("The Dunn Index is ",k_stats$dunn)
# Analysis method euclidean (distance matrix)
PCK.dd <- dist(clusters, method="euclidean")
# Analysis method euclidean (distance matrix)
PCK.dd <- dist(clusters[,1], method="euclidean")
k_stats <- cluster.stats(PCK.dd,Km.out$cluster)
# Silhouette analysis
sil.kpca <- silhouette(Km.out$cluster,PCK.dd)
fviz_silhouette(sil.kpca)
# Silhouette analysis
sil.kpca <- silhouette(Km.out$cluster[,1],PCK.dd)
# Silhouette analysis
sil.kpca <- silhouette(clusters,PCK.dd)
# Silhouette analysis
sil.kpca <- silhouette(clusters[,1],PCK.dd)
fviz_silhouette(sil.kpca)
k_stats <- cluster.stats(PCK.dd,clusters)
k_stats <- cluster.stats(PCK.dd,clusters[,1])
paste("The Dunn Index is ",k_stats$dunn)
k_stats
# Silhouette analysis
sil.kpca <- silhouette(PCK.dd, clusters[,1])
# Analysis method euclidean (distance matrix)
PCK.dd <- dist(Km.out, method="euclidean")
# Columns to evaluate
data <- read_csv("Data - Clean/fulllist.csv") #loading data from CSV
col.features <- names(data[c(1,3,4,5,6,7,8,9,10)])
# Normalize data
X <- data[col.features]
X.n <-scaler(X[2:8])
# K number
K <-4
#Clustering Kmeans
set.seed(1)
km <- kmeans(X.n,K)
# Analysis method euclidean (distance matrix)
dd <- dist(X.n,method="euclidean")
# Columns to evaluate
data <- read_csv("Data - Clean/fulllist.csv") #loading data from CSV
col.features <- names(data[c(1,4,6,7,9,10)])
# Normalize data
X <- data[col.features]
X.n <-scaler(X[2:5])
Pca <- prcomp(X.n, #pca of all normalized data starting at column 2
center = TRUE, scale. = TRUE)
# Kmeans for PCA ----------------------------------------------------------
set.seed(7) #Set the seed for reproducibility
PC <- Pca$x
kinput <- cbind.data.frame(X[,6], PC)
Km.out <- kmeans(kinput[,2:5], K)
clusters <- cbind.data.frame(Km.out$cluster, X[,6])
# Analysis method euclidean (distance matrix)
PCK.dd <- dist(X.n, method="euclidean")
Km.out <- kmeans(kinput[,2:5], K)
# K = number of clusters
K <-4
Km.out <- kmeans(kinput[,2:5], K)
k_stats <- cluster.stats(PCK.dd, Km.out$clusters)
k_stats <- cluster.stats(PCK.dd, Km.out$clusters)
# Analysis method euclidean (distance matrix)
PCK.dd <- dist(X.n, method="euclidean")
k_stats <- cluster.stats(PCK.dd, Km.out$clusters)
k_stats <- cluster.stats(PCK.dd, Km.out$cluster)
# Silhouette analysis
sil.kpca <- silhouette(Km.out$cluster, PCK.dd)
fviz_silhouette(sil.kpca)
paste("The Dunn Index is ",k_stats$dunn)
View(X.n)
View(X)
View(data)
summary(Pca)
# Columns to evaluate
data <- read_csv("Data - Clean/fulllist.csv") #loading data from CSV
Sys.setenv(SPOTIFY_CLIENT_ID = "1808c94d92d94f83843e8e7bbcde89e3")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "ce03a72698f740ac9606cde1cc3f3a83")
access.token <- get_spotify_access_token()
#acc
happy <- get_playlist_audio_features("Spotify", "37i9dQZF1DXdPec7aLTmlC")
sad <- get_playlist_audio_features("Spotify", "37i9dQZF1DWSqBruwoIXkA")
calm <- get_playlist_audio_features("Spotify", "37i9dQZF1DXdEZt3tTR001")
energy <- get_playlist_audio_features("Spotify", "37i9dQZF1DX0vHZ8elq0UK")
hap.s <- happy %>%
select(track.name, loudness,
danceability, energy, tempo, speechiness, valence)
sad.s <- sad %>%
select(track.name, loudness,
danceability,
energy, tempo, speechiness, valence)
sad.s <- add_column(sad.s, "Sad")
names(sad.s)[9] <- "Playlist"
Sys.setenv(SPOTIFY_CLIENT_ID = "1808c94d92d94f83843e8e7bbcde89e3")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "ce03a72698f740ac9606cde1cc3f3a83")
access.token <- get_spotify_access_token()
#acc
happy <- get_playlist_audio_features("Spotify", "37i9dQZF1DXdPec7aLTmlC")
sad <- get_playlist_audio_features("Spotify", "37i9dQZF1DWSqBruwoIXkA")
calm <- get_playlist_audio_features("Spotify", "37i9dQZF1DWTC99MCpbjP8")
energy <- get_playlist_audio_features("Spotify", "37i9dQZF1DWZixSclZdoFE")
#acc
happy <- get_playlist_audio_features("Spotify", "37i9dQZF1DXdPec7aLTmlC")
sad <- get_playlist_audio_features("Spotify", "37i9dQZF1DWSqBruwoIXkA")
calm <- get_playlist_audio_features("Spotify", "37i9dQZF1DX9etR9S28cIo")
energy <- get_playlist_audio_features("Spotify", "37i9dQZF1DWZixSclZdoFE")
hap.s <- happy %>%
select(track.name, loudness,
danceability, energy, tempo, speechiness, valence)
hap.s <- add_column(hap.s, "Happy")
names(hap.s)[8] <- "Playlist"
sad.s <- sad %>%
select(track.name, loudness,
danceability,
energy, tempo, speechiness, valence)
sad.s <- add_column(sad.s, "Sad")
names(sad.s)[8] <- "Playlist"
cal.s <- calm %>%
select(track.name, loudness,
danceability,
energy, tempo, speechiness, valence)
cal.s <- add_column(cal.s, "Calm")
names(cal.s)[8] <- "Playlist"
ene.s <- energy %>%
select(track.name, loudness,
danceability,
energy, tempo, speechiness, valence)
ene.s <- add_column(ene.s, "Energy")
names(ene.s)[8] <- "Playlist"
fulllist <- rbind(hap.s, sad.s, cal.s, ene.s)
write.csv(fulllist, "Data - Clean/fulllist.csv")
# Columns to evaluate
data <- read_csv("Data - Clean/fulllist.csv") #loading data from CSV
# Columns to evaluate
data <- read_csv("Data - Clean/fulllist.csv") #loading data from CSV
col.features <- names(data[c(1,3,4,5,6,7,8,9)])
# Normalize data
X <- data[col.features]
View(X)
X.n <-scaler(X[2:7])
Pca <- prcomp(X.n, #pca of all normalized data starting at column 2
center = TRUE, scale. = TRUE)
summary(Pca)
# Kmeans for PCA ----------------------------------------------------------
set.seed(7) #Set the seed for reproducibility
PC <- Pca$x
head(PC)
kinput <- cbind.data.frame(X[,6], PC)
# K = number of clusters
K <-4
View(PC)
View(PC)
View(PC)
View(PC)
View(PC)
View(PC)
View(PC)
View(kinput)
View(X)
kinput <- cbind.data.frame(X[,8], PC)
Km.out <- kmeans(kinput[,2:5], K)
table(Km.out$cluster)
# Analysis method euclidean (distance matrix)
PCK.dd <- dist(X.n, method="euclidean")
k_stats <- cluster.stats(PCK.dd, Km.out$cluster)
# Silhouette analysis
sil.kpca <- silhouette(Km.out$cluster, PCK.dd)
fviz_silhouette(sil.kpca)
Sys.setenv(SPOTIFY_CLIENT_ID = "1808c94d92d94f83843e8e7bbcde89e3")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "ce03a72698f740ac9606cde1cc3f3a83")
access.token <- get_spotify_access_token()
#acc
happy <- get_playlist_audio_features("Spotify", "37i9dQZF1DXdPec7aLTmlC")
sad <- get_playlist_audio_features("Spotify", "37i9dQZF1DWSqBruwoIXkA")
calm <- get_playlist_audio_features("Spotify", "37i9dQZF1DWTC99MCpbjP8")
energy <- get_playlist_audio_features("Spotify", "37i9dQZF1DX0vHZ8elq0UK")
hap.s <- happy %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness, valence)
hap.s <- add_column(hap.s, "Happy")
names(hap.s)[9] <- "Playlist"
sad.s <- sad %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness, valence)
sad.s <- add_column(sad.s, "Sad")
names(sad.s)[9] <- "Playlist"
cal.s <- calm %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness, valence)
cal.s <- add_column(cal.s, "Calm")
names(cal.s)[9] <- "Playlist"
ene.s <- energy %>%
select(track.name, instrumentalness,
danceability, acousticness,
energy, tempo, speechiness, valence)
ene.s <- add_column(ene.s, "Energy")
names(ene.s)[9] <- "Playlist"
fulllist <- rbind(hap.s, sad.s, cal.s, ene.s)
write.csv(fulllist, "Data - Clean/fulllist.csv")
# Columns to evaluate
data <- read_csv("Data - Clean/fulllist.csv") #loading data from CSV
col.features <- names(data[c(1,3,4,5,6,7,8,9,10)])
# Columns to evaluate
data <- read_csv("Data - Clean/fulllist.csv") #loading data from CSV
col.features <- names(data[c(1,3,4,5,6,7,8,9,10)])
# Normalize data
X <- data[col.features]
View(X)
X.n <-scaler(X[2:8])
# K number
K <-4
#Clustering Kmeans
set.seed(1)
PC <- Pca$x
Pca <- prcomp(X.n, #pca of all normalized data starting at column 2
center = TRUE, scale. = TRUE)
summary(Pca)
#Ploting PCA 1 and PCA 2
plot(Pca$x[,1], Pca$x[,2], frame = TRUE)
pca.var <- Pca$sdev^2
pca.v.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.v.per, main = "scree Plot", xlab = "Principal Componet", ylab = "Percent Variation")
PC <- Pca$x #turning Principle components (PC) into object
#combing Playlist names with PC's
kinput <- cbind.data.frame(X[,9], PC[,1:4])
View(kinput)
#plotting clusters with orginal data
fviz_cluster(Km.out, X.n)
#calculating Kmeans of PCs
Km.out <- kmeans(kinput[,2:5], K)
#plotting clusters with orginal data
fviz_cluster(Km.out, X.n)
#Shows how many data points (songs) are in each cluster
table(Km.out$cluster)
# Analysis method euclidean (distance matrix)
PCK.dd <- dist(Km.out,method="euclidean")
#plotting clusters with orginal data
fviz_cluster(Km.out, kinput[,2:5])
# Analysis method euclidean (distance matrix)
PCK.dd <- dist(kinput[,2:5],method="euclidean")
k_stats <- cluster.stats(PCK.dd,Km.out$cluster)
# Silhouette analysis
sil.kpca <- silhouette(Km.out$cluster,PCK.dd)
fviz_silhouette(sil.kpca)
paste("The Dunn Index is ",k_stats$dunn)
Km_labels <- cbind.data.frame(Km.out$cluster, X[,8])
View(Km_labels)
View(X)
Km_labels <- cbind.data.frame(Km.out$cluster, X[,9])
# Cross-tab of clustering & known labels
library(gmodels)
CrossTable(X, km.out$cluster)
CrossTable(X, Km.out$cluster)
CrossTable(X.n, Km.out$cluster)
CrossTable(kinput[,2:5], Km.out$cluster)
View(kinput)
CrossTable(kinput[,2:5], Km.out$cluster[,1:4])
CrossTable(kinput, Km.out$cluster[,1:4])
CrossTable(kinput, Km.out$cluster)
CrossTable(kinput, Km_labels)
View(data)
CrossTable(kinput$Playlist, Km_labels$`Km.out$cluster`)
View(PC)
View(kinput)
View(Km_labels)
Ctable <- CrossTable(kinput$Playlist, Km_labels$`Km.out$cluster`)
View(Ctable)
View(Ctable)
print(Ctable)
Ctable <- data.frame(CrossTable(kinput$Playlist, Km_labels$`Km.out$cluster`))
View(Ctable)
View(Ctable)
Ctable <- data.frame(CrossTable(kinput$Playlist, Km_labels$`Km.out$cluster`))
#plotting clusters with original data
fviz_cluster(Km.out, kinput[,2:5])
#plotting Bargraph of PC's %
barplot(pca.v.per, main = "scree Plot", xlab = "Principal Componet", ylab = "Percent Variation")
#plotting clusters with original data
fviz_cluster(Km.out, kinput[,2:5])
#plotting Silhouette analysis to find average with (= 0.42)
fviz_silhouette(sil.kpca)
